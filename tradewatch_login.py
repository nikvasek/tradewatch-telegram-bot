from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
import os
import glob
import shutil
import pandas as pd
import hashlib
from pathlib import Path
import threading
import concurrent.futures
from datetime import datetime
from selenium.webdriver.common.window import WindowTypes

# TradeWatch credentials (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway)
TRADEWATCH_EMAIL = os.getenv("TRADEWATCH_EMAIL", "TRADEWATCH_EMAIL")
TRADEWATCH_PASSWORD = os.getenv("TRADEWATCH_PASSWORD", "TRADEWATCH_PASSWORD")

def get_railway_chrome_options(batch_number=None):
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome –¥–ª—è Railway deployment
    """
    options = webdriver.ChromeOptions()
    
    # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    if batch_number:
        user_data_dir = f"/tmp/chrome_user_data_{batch_number}_{int(time.time())}"
        options.add_argument(f"--user-data-dir={user_data_dir}")
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {user_data_dir}")
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-logging")
    options.add_argument("--disable-web-security")
    options.add_argument("--allow-running-insecure-content")
    
    # Railway —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    options.add_argument("--disable-background-timer-throttling")
    options.add_argument("--disable-backgrounding-occluded-windows")
    options.add_argument("--disable-renderer-backgrounding")
    options.add_argument("--disable-features=TranslateUI")
    options.add_argument("--disable-default-apps")
    options.add_argument("--disable-sync")
    options.add_argument("--disable-background-networking")
    options.add_argument("--single-process")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
    if os.getenv('RAILWAY_ENVIRONMENT_NAME'):
        print("üöÇ –ó–∞–ø—É—Å–∫ –Ω–∞ Railway - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        options.add_argument("--memory-pressure-off")
        options.add_argument("--max_old_space_size=4096")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ –Ω–∞ Railway
        options.add_argument("--disable-background-timer-throttling")
        options.add_argument("--disable-backing-store-limit")
        options.add_argument("--disable-hang-monitor")
        options.add_argument("--disable-client-side-phishing-detection")
        options.add_argument("--disable-popup-blocking")
        options.add_argument("--disable-prompt-on-repost")
        options.add_argument("--disable-renderer-backgrounding")
        options.add_argument("--disable-ipc-flooding-protection")
    
    return options

def get_batch_size():
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    if os.getenv('RAILWAY_ENVIRONMENT_NAME'):
        print("üöÇ Railway –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏ –ø–æ 50 –∫–æ–¥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
        return 50  # –ï—â–µ –º–µ–Ω—å—à–µ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    else:
        print("üíª –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏ –ø–æ 450 –∫–æ–¥–æ–≤")
        return 450

def cleanup_chrome_temp_dirs():
    """
    –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Chrome
    """
    try:
        import glob
        temp_dirs = glob.glob("/tmp/chrome_user_data_*")
        for temp_dir in temp_dirs:
            try:
                import shutil
                shutil.rmtree(temp_dir, ignore_errors=True)
                print(f"üßπ –û—á–∏—â–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
            except:
                pass
    except:
        pass

def get_chrome_service():
    """
    –ü–æ–ª—É—á–∏—Ç—å Service –¥–ª—è ChromeDriver –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –≤ Docker —Å selenium/standalone-chrome
    if os.path.exists('/usr/bin/chromedriver'):
        print("üê≥ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π ChromeDriver –∏–∑ Docker –æ–±—Ä–∞–∑–∞")
        return Service('/usr/bin/chromedriver')
    elif os.path.exists('/opt/selenium/chromedriver-*/chromedriver'):
        # –í selenium –æ–±—Ä–∞–∑–∞—Ö ChromeDriver –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–¥–µ—Å—å
        import glob
        chromedriver_paths = glob.glob('/opt/selenium/chromedriver-*/chromedriver')
        if chromedriver_paths:
            print(f"üê≥ –ò—Å–ø–æ–ª—å–∑—É–µ–º ChromeDriver –∏–∑ Selenium –æ–±—Ä–∞–∑–∞: {chromedriver_paths[0]}")
            return Service(chromedriver_paths[0])
    
    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º WebDriver Manager
    print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º WebDriver Manager –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ChromeDriver")
    return Service(ChromeDriverManager().install())

def clear_ean_field_thoroughly(driver, ean_field, batch_number):
    """
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –ø–æ–ª–µ EAN –∫–æ–¥–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    
    Args:
        driver: –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä
        ean_field: —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è EAN –∫–æ–¥–æ–≤
        batch_number: –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print(f"–ù–ê–ß–ò–ù–ê–ï–ú –ê–ì–†–ï–°–°–ò–í–ù–£–Æ –û–ß–ò–°–¢–ö–£ –ø–æ–ª—è EAN –∫–æ–¥–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    initial_value = ean_field.get_attribute("value")
    print(f"–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è: '{initial_value}'")
    
    # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –≤ —Ñ–æ–∫—É—Å–µ
    try:
        ean_field.click()
        time.sleep(0.3)
    except:
        pass
    
    # –°–ü–û–°–û–ë 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
    ean_field.clear()
    time.sleep(0.2)
    
    # –°–ü–û–°–û–ë 2: –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –∏ —É–¥–∞–ª—è–µ–º (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
    try:
        ean_field.send_keys(Keys.CONTROL + "a")
        time.sleep(0.1)
        ean_field.send_keys(Keys.DELETE)
        time.sleep(0.2)
    except:
        pass
    
    # –°–ü–û–°–û–ë 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∞–º–∏
    try:
        ean_field.send_keys(Keys.CONTROL + "a")
        time.sleep(0.1)
        ean_field.send_keys(Keys.BACKSPACE)
        time.sleep(0.2)
    except:
        pass
    
    # –°–ü–û–°–û–ë 4: JavaScript –æ—á–∏—Å—Ç–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
    driver.execute_script("arguments[0].value = '';", ean_field)
    time.sleep(0.2)
    
    # –°–ü–û–°–û–ë 5: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è JavaScript –æ—á–∏—Å—Ç–∫–∞
    driver.execute_script("""
        var element = arguments[0];
        element.value = '';
        element.innerHTML = '';
        element.textContent = '';
        element.innerText = '';
        if (element.defaultValue) element.defaultValue = '';
    """, ean_field)
    time.sleep(0.2)
    
    # –°–ü–û–°–û–ë 6: –≠–º—É–ª—è—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ JavaScript —Å–æ–±—ã—Ç–∏—è
    driver.execute_script("""
        var element = arguments[0];
        element.focus();
        element.value = '';
        element.dispatchEvent(new Event('input', { bubbles: true }));
        element.dispatchEvent(new Event('change', { bubbles: true }));
        element.dispatchEvent(new Event('blur', { bubbles: true }));
        element.dispatchEvent(new Event('keydown', { bubbles: true }));
        element.dispatchEvent(new Event('keyup', { bubbles: true }));
    """, ean_field)
    time.sleep(0.3)
    
    # –°–ü–û–°–û–ë 7: –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ execCommand
    driver.execute_script("""
        var element = arguments[0];
        element.focus();
        element.select();
        document.execCommand('selectAll');
        document.execCommand('delete');
        document.execCommand('removeFormat');
    """, ean_field)
    time.sleep(0.2)
    
    # –°–ü–û–°–û–ë 8: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    driver.execute_script("""
        var element = arguments[0];
        element.setAttribute('value', '');
        element.removeAttribute('defaultValue');
        if (element.value) element.value = '';
    """, ean_field)
    time.sleep(0.3)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–æ
    for attempt in range(3):
        current_value = ean_field.get_attribute("value")
        print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: '{current_value}'")
        
        if not current_value or len(current_value.strip()) == 0:
            print(f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
            break
        else:
            print(f"‚ùå –ü–æ–ª–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å: '{current_value}'. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            driver.execute_script("""
                var element = arguments[0];
                
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                element.value = '';
                element.defaultValue = '';
                element.textContent = '';
                element.innerHTML = '';
                element.innerText = '';
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                element.removeAttribute('value');
                element.removeAttribute('defaultValue');
                
                // –≠–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                element.focus();
                element.select();
                
                // –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ range API
                if (window.getSelection) {
                    var selection = window.getSelection();
                    selection.removeAllRanges();
                    var range = document.createRange();
                    range.selectNodeContents(element);
                    selection.addRange(range);
                    selection.deleteFromDocument();
                }
                
                // –§–∏–Ω–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                element.value = '';
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
                element.dispatchEvent(new Event('input', { bubbles: true }));
                element.dispatchEvent(new Event('change', { bubbles: true }));
            """, ean_field)
            time.sleep(0.5)
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
            if attempt == 2:
                final_value = ean_field.get_attribute("value")
                if final_value and final_value.strip():
                    print(f"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ª–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å! –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{final_value}'")
                    print("–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    driver.refresh()
                    time.sleep(3)
                    return False
    
    print(f"‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
    return True


def insert_ean_codes_safely(driver, ean_field, ean_codes_string, batch_number):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç EAN –∫–æ–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    Args:
        driver: –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä
        ean_field: —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è EAN –∫–æ–¥–æ–≤
        ean_codes_string: —Å—Ç—Ä–æ–∫–∞ —Å EAN –∫–æ–¥–∞–º–∏
        batch_number: –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –≤ —Ñ–æ–∫—É—Å–µ
    try:
        ean_field.click()
        time.sleep(0.2)
    except:
        pass
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥—ã
    ean_field.send_keys(ean_codes_string)
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    time.sleep(0.5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥—ã –≤—Å—Ç–∞–≤–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    inserted_value = ean_field.get_attribute("value")
    if not inserted_value or len(inserted_value.strip()) == 0:
        print(f"–ö–æ–¥—ã –Ω–µ –≤—Å—Ç–∞–≤–∏–ª–∏—Å—å! –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ JavaScript...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ JavaScript
        driver.execute_script("""
            var element = arguments[0];
            var text = arguments[1];
            element.focus();
            element.value = text;
            element.dispatchEvent(new Event('input', { bubbles: true }));
            element.dispatchEvent(new Event('change', { bubbles: true }));
        """, ean_field, ean_codes_string)
        
        time.sleep(1)
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        inserted_value = ean_field.get_attribute("value")
        if not inserted_value or len(inserted_value.strip()) == 0:
            print(f"–û—à–∏–±–∫–∞: –∫–æ–¥—ã —Ç–∞–∫ –∏ –Ω–µ –≤—Å—Ç–∞–≤–∏–ª–∏—Å—å –¥–∞–∂–µ —á–µ—Ä–µ–∑ JavaScript!")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞
            try:
                ean_field.clear()
                ean_field.send_keys(ean_codes_string)
                time.sleep(1)
                inserted_value = ean_field.get_attribute("value")
            except:
                pass
            
            if not inserted_value or len(inserted_value.strip()) == 0:
                return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–¥–æ–≤
    inserted_codes = inserted_value.strip().split()
    expected_codes = ean_codes_string.strip().split()
    
    if len(inserted_codes) != len(expected_codes):
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ ({len(inserted_codes)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º ({len(expected_codes)})")
        print(f"–û–∂–∏–¥–∞–ª–∏—Å—å: {expected_codes[:5]}...")
        print(f"–í—Å—Ç–∞–≤–ª–µ–Ω—ã: {inserted_codes[:5]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ –∫–æ–¥–æ–≤ –≤—Å—Ç–∞–≤–∏–ª–∞—Å—å
        if len(inserted_codes) < len(expected_codes) * 0.5:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –∫–æ–¥–æ–≤!")
            return False
    else:
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(inserted_codes)} EAN –∫–æ–¥–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
    
    return True


def verify_batch_uniqueness(downloaded_files):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    
    Args:
        downloaded_files: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã, False –µ—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤...")
    
    file_hashes = {}
    duplicates_found = False
    
    for file_path in downloaded_files:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            df = pd.read_excel(file_path)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            content_string = df.to_string()
            content_hash = hashlib.md5(content_string.encode()).hexdigest()
            
            filename = os.path.basename(file_path)
            
            if content_hash in file_hashes:
                print(f"üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï: {filename} –∏–¥–µ–Ω—Ç–∏—á–µ–Ω {file_hashes[content_hash]}")
                duplicates_found = True
            else:
                file_hashes[content_hash] = filename
                print(f"‚úÖ –§–∞–π–ª —É–Ω–∏–∫–∞–ª–µ–Ω: {filename}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    if duplicates_found:
        print("\nüö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False
    else:
        print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã.")
        return True


def format_ean_to_13_digits(ean_code):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç EAN –∫–æ–¥ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 13-—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        ean_code: EAN –∫–æ–¥ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ)
        
    Returns:
        str: EAN –∫–æ–¥ –≤ 13-—Ü–∏—Ñ—Ä–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
        
    –ü—Ä–∏–º–µ—Ä:
        format_ean_to_13_digits("123456789") -> "0000123456789"
        format_ean_to_13_digits("1234567890123") -> "1234567890123"
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        ean_str = str(ean_code).strip()
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not ean_str:
            return None
        
        # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
        if 'E' in ean_str.upper() or 'e' in ean_str:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ float –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
                ean_float = float(ean_str)
                ean_str = str(int(ean_float))
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        ean_digits = ''.join(char for char in ean_str if char.isdigit())
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not ean_digits:
            return None
            
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 13 —Ü–∏—Ñ—Ä –µ—Å–ª–∏ –±–æ–ª—å—à–µ
        if len(ean_digits) > 13:
            ean_digits = ean_digits[:13]
            
        # –î–æ–ø–æ–ª–Ω—è–µ–º –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏ –¥–æ 13 —Ü–∏—Ñ—Ä
        ean_formatted = ean_digits.zfill(13)
        
        return ean_formatted
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ EAN –∫–æ–¥–∞ '{ean_code}': {e}")
        return None

def process_ean_codes_batch(ean_codes_batch, download_dir, batch_number=1, headless=True):
    """
    [–£–°–¢–ê–†–ï–õ–û] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É EAN –∫–æ–¥–æ–≤ –≤ TradeWatch –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ process_supplier_file_with_tradewatch() –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        ean_codes_batch: —Å–ø–∏—Å–æ–∫ EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        batch_number: –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        headless: –∑–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (True) –∏–ª–∏ —Å GUI (False)
    
    Returns:
        str: –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ process_supplier_file_with_tradewatch() –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –µ–¥–∏–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞.")
    
    if not ean_codes_batch:
        print("–ü—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ EAN –∫–æ–¥–æ–≤")
        return None
        
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    download_path = Path(download_dir)
    download_path.mkdir(parents=True, exist_ok=True)
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º (–Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ)
    old_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
    for old_file in old_files:
        try:
            os.remove(old_file)
            print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {old_file}: {e}")
            pass
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º EAN –∫–æ–¥—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
    ean_codes_string = ' '.join(str(code) for code in ean_codes_batch)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome –¥–ª—è Railway
    if os.getenv('RAILWAY_ENVIRONMENT_NAME'):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Railway-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options = get_railway_chrome_options(batch_number)
        print("üöÇ Railway —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º headless Chrome")
    else:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        options = webdriver.ChromeOptions()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        if headless:
            options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ
        
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-logging")
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-running-insecure-content")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    prefs = {
        "download.default_directory": str(download_path.absolute()),
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    }
    options.add_experimental_option("prefs", prefs)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    service = get_chrome_service()
    driver = webdriver.Chrome(service=service, options=options)
    
    try:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {batch_number} —Å {len(ean_codes_batch)} EAN –∫–æ–¥–∞–º–∏...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        driver.get("https://tradewatch.pl/login.jsf")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        wait = WebDriverWait(driver, 10)
        
        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è email
        email_field = wait.until(EC.presence_of_element_located((By.NAME, "j_username")))
        
        # –í–≤–æ–¥–∏–º email
        email_field.clear()
        email_field.send_keys(TRADEWATCH_EMAIL)
        
        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
        password_field = driver.find_element(By.NAME, "j_password")
        
        # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        password_field.clear()
        password_field.send_keys(TRADEWATCH_PASSWORD)
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        login_button = driver.find_element(By.NAME, "btnLogin")
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        login_button.click()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        current_url = driver.current_url
        
        if "login.jsf" not in current_url:
            print("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É EAN Price Report
            driver.get("https://tradewatch.pl/report/ean-price-report.jsf")
            time.sleep(3)
            
            try:
                # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ EAN –∫–æ–¥–æ–≤
                ean_field = wait.until(EC.presence_of_element_located((By.ID, "eansPhrase")))
                
                # –¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
                clear_ean_field_thoroughly(driver, ean_field, batch_number)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ–º EAN –∫–æ–¥—ã
                if not insert_ean_codes_safely(driver, ean_field, ean_codes_string, batch_number):
                    print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å EAN –∫–æ–¥—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
                    return None
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                time.sleep(1)
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Generuj"
                generate_button = driver.find_element(By.ID, "j_idt703")
                
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                generate_button.click()
                
                # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                print("–ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
                time.sleep(5)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                print("–ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Eksport do XLS"
                try:
                    export_button = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Eksport do XLS")))
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
                    export_button.click()
                    
                    # –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                    print("–ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
                    
                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    max_wait_time = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 60 —Å–µ–∫—É–Ω–¥
                    wait_interval = 2   # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    waited_time = 0
                    
                    downloaded_file_found = False
                    
                    while waited_time < max_wait_time:
                        time.sleep(wait_interval)
                        waited_time += wait_interval
                        
                        # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è)
                        downloaded_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
                        if downloaded_files:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∞–ª—Å—è (–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–∑–º–µ—Ä–µ)
                            latest_file = downloaded_files[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) —Ñ–∞–π–ª
                            
                            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                            initial_size = os.path.getsize(latest_file)
                            time.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                            
                            try:
                                final_size = os.path.getsize(latest_file)
                                if initial_size == final_size and final_size > 0:
                                    # –§–∞–π–ª —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –∑–Ω–∞—á–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                                    print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –∑–∞–≥—Ä—É–∂–µ–Ω: {latest_file} (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                                    downloaded_file_found = True
                                    break
                                else:
                                    print(f"–§–∞–π–ª –µ—â–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è... (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                            except:
                                # –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                                print(f"–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...")
                                continue
                        else:
                            print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞... ({waited_time}/{max_wait_time} —Å–µ–∫)")
                    
                    if downloaded_file_found:
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        new_filename = f"TradeWatch_batch_{batch_number}.xlsx"
                        new_filepath = os.path.join(download_dir, new_filename)
                        
                        if os.path.exists(new_filepath):
                            os.remove(new_filepath)
                        
                        os.rename(latest_file, new_filepath)
                        return new_filepath
                    else:
                        print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {max_wait_time} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
                        return None
                        
                except Exception as export_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥—Ä—É–ø–ø—ã {batch_number}: {export_error}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                    try:
                        export_button = driver.find_element(By.CSS_SELECTOR, "a.icon-excel")
                        export_button.click()
                        
                        # –ñ–¥–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        max_wait_time = 60
                        wait_interval = 2
                        waited_time = 0
                        
                        while waited_time < max_wait_time:
                            time.sleep(wait_interval)
                            waited_time += wait_interval
                            
                            downloaded_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
                            if downloaded_files:
                                latest_file = downloaded_files[0]
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                                initial_size = os.path.getsize(latest_file)
                                time.sleep(3)
                                
                                try:
                                    final_size = os.path.getsize(latest_file)
                                    if initial_size == final_size and final_size > 0:
                                        new_filename = f"TradeWatch_batch_{batch_number}.xlsx"
                                        new_filepath = os.path.join(download_dir, new_filename)
                                        
                                        if os.path.exists(new_filepath):
                                            os.remove(new_filepath)
                                        
                                        os.rename(latest_file, new_filepath)
                                        return new_filepath
                                except:
                                    continue
                            else:
                                print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞... ({waited_time}/{max_wait_time} —Å–µ–∫)")
                        
                        return None
                    except Exception as alt_error:
                        print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}: {alt_error}")
                        return None
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å EAN –∫–æ–¥–∞–º–∏ –≥—Ä—É–ø–ø—ã {batch_number}: {e}")
                return None
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É")
            return None
            
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {batch_number}: {e}")
        return None
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        driver.quit()


def process_batch_in_session(driver, ean_codes_batch, download_dir, batch_number):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É EAN –∫–æ–¥–æ–≤ –≤ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    
    Args:
        driver: –∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä
        ean_codes_batch: —Å–ø–∏—Å–æ–∫ EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        batch_number: –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
    
    Returns:
        str: –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    if not ean_codes_batch:
        print("–ü—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ EAN –∫–æ–¥–æ–≤")
        return None
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º EAN –∫–æ–¥—ã –≤ 13-—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        formatted_ean_codes = []
        for code in ean_codes_batch:
            formatted_code = format_ean_to_13_digits(code)
            if formatted_code:
                formatted_ean_codes.append(formatted_code)
        
        if not formatted_ean_codes:
            print("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö EAN –∫–æ–¥–æ–≤ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None
        
        print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_ean_codes)} EAN –∫–æ–¥–æ–≤ –≤ 13-—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ EAN –∫–æ–¥—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        ean_codes_string = ' '.join(formatted_ean_codes)
        
        print(f"DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É {batch_number} —Å EAN –∫–æ–¥–∞–º–∏: {ean_codes_string[:100]}...")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∫—É–∫–∏ –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        driver.execute_script("localStorage.clear(); sessionStorage.clear();")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        driver.get("about:blank")
        time.sleep(1)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É EAN Price Report –∑–∞–Ω–æ–≤–æ
        driver.get("https://tradewatch.pl/report/ean-price-report.jsf")
        time.sleep(3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        
        wait = WebDriverWait(driver, 15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        
        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ EAN –∫–æ–¥–æ–≤
        ean_field = wait.until(EC.presence_of_element_located((By.ID, "eansPhrase")))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        initial_value = ean_field.get_attribute("value")
        if initial_value and initial_value.strip():
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π! –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{initial_value}'")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            driver.refresh()
            time.sleep(3)
            ean_field = wait.until(EC.presence_of_element_located((By.ID, "eansPhrase")))
        
        # –¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
        if not clear_ean_field_thoroughly(driver, ean_field, batch_number):
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
            return None
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ–º EAN –∫–æ–¥—ã
        if not insert_ean_codes_safely(driver, ean_field, ean_codes_string, batch_number):
            print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å EAN –∫–æ–¥—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
            return None
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –∫–æ–¥—ã
        final_value = ean_field.get_attribute("value")
        final_codes = final_value.strip().split() if final_value else []
        expected_codes = ean_codes_string.strip().split()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∫–æ–¥–æ–≤
        extra_codes = [code for code in final_codes if code not in expected_codes]
        if extra_codes:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∫–æ–¥—ã –≤ –ø–æ–ª–µ: {extra_codes}")
            print(f"–û–∂–∏–¥–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ: {expected_codes}")
            print(f"–ù–∞–π–¥–µ–Ω–æ –≤ –ø–æ–ª–µ: {final_codes}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            driver.refresh()
            time.sleep(3)
            ean_field = wait.until(EC.presence_of_element_located((By.ID, "eansPhrase")))
            clear_ean_field_thoroughly(driver, ean_field, batch_number)
            
            if not insert_ean_codes_safely(driver, ean_field, ean_codes_string, batch_number):
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
                return None
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(1)
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Generuj"
        generate_button = driver.find_element(By.ID, "j_idt703")
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        generate_button.click()
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("–ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
        time.sleep(5)
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("–ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        time.sleep(3)
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Eksport do XLS"
        try:
            export_button = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Eksport do XLS")))
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            click_success = False
            
            # –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            try:
                export_button.click()
                click_success = True
                print("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω (–æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫)")
            except Exception as e:
                print(f"–û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
                # –°–ø–æ—Å–æ–± 2: JavaScript –∫–ª–∏–∫
                try:
                    driver.execute_script("arguments[0].click();", export_button)
                    click_success = True
                    print("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω (JavaScript –∫–ª–∏–∫)")
                except Exception as js_e:
                    print(f"JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {js_e}")
                    
                    # –°–ø–æ—Å–æ–± 3: –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                    try:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–∏
                        overlays = driver.find_elements(By.CLASS_NAME, "ui-widget-overlay")
                        for overlay in overlays:
                            driver.execute_script("arguments[0].style.display = 'none';", overlay)
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å —Å–Ω–æ–≤–∞
                        time.sleep(1)
                        export_button.click()
                        click_success = True
                        print("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω (–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–≤–µ—Ä–ª–µ–µ–≤)")
                    except Exception as overlay_e:
                        print(f"–ö–ª–∏–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–≤–µ—Ä–ª–µ–µ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {overlay_e}")
                        
                        # –°–ø–æ—Å–æ–± 4: Scroll to element –∏ –∫–ª–∏–∫
                        try:
                            driver.execute_script("arguments[0].scrollIntoView(true);", export_button)
                            time.sleep(1)
                            driver.execute_script("arguments[0].click();", export_button)
                            click_success = True
                            print("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω (—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π)")
                        except Exception as scroll_e:
                            print(f"–ö–ª–∏–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {scroll_e}")
            
            if not click_success:
                print("–í—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
            # –ï—Å–ª–∏ –∫–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω, –∂–¥–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            print("–ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
            max_wait_time = 60
            wait_interval = 2
            waited_time = 0
            
            downloaded_file_found = False
            
            while waited_time < max_wait_time:
                time.sleep(wait_interval)
                waited_time += wait_interval
                
                # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è)
                downloaded_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
                if downloaded_files:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∞–ª—Å—è
                    latest_file = downloaded_files[0]
                    
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    initial_size = os.path.getsize(latest_file)
                    time.sleep(3)
                    
                    try:
                        final_size = os.path.getsize(latest_file)
                        if initial_size == final_size and final_size > 0:
                            print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –∑–∞–≥—Ä—É–∂–µ–Ω: {latest_file} (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                            downloaded_file_found = True
                            break
                        else:
                            print(f"–§–∞–π–ª –µ—â–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è... (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                    except:
                        print(f"–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...")
                        continue
                else:
                    print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞... ({waited_time}/{max_wait_time} —Å–µ–∫)")
            
            if downloaded_file_found:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                new_filename = f"TradeWatch_batch_{batch_number}.xlsx"
                new_filepath = os.path.join(download_dir, new_filename)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                if os.path.exists(new_filepath):
                    try:
                        existing_size = os.path.getsize(new_filepath)
                        new_size = os.path.getsize(latest_file)
                        
                        if existing_size == new_size:
                            print(f"–§–∞–π–ª {new_filepath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ç–∞–∫–∏–º –∂–µ —Ä–∞–∑–º–µ—Ä–æ–º ({existing_size} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                            # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                            os.remove(latest_file)
                            return new_filepath
                        else:
                            print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª {new_filepath} –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä ({existing_size} vs {new_size} –±–∞–π—Ç), –∑–∞–º–µ–Ω—è–µ–º...")
                            os.remove(new_filepath)
                    except Exception as rm_e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª {new_filepath}: {rm_e}")
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                try:
                    os.rename(latest_file, new_filepath)
                    print(f"–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {latest_file} -> {new_filepath}")
                    return new_filepath
                except Exception as rename_e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {rename_e}")
                    return None
            else:
                print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {max_wait_time} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
                return None
                
        except Exception as export_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥—Ä—É–ø–ø—ã {batch_number}: {export_error}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ –¥—Ä—É–≥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                alternative_buttons = [
                    (By.CSS_SELECTOR, "a.icon-excel"),
                    (By.CSS_SELECTOR, "a[onclick*='j_idt133']"),
                    (By.XPATH, "//a[contains(@class, 'icon-excel')]"),
                    (By.XPATH, "//a[contains(@onclick, 'j_idt133')]")
                ]
                
                button_found = False
                for selector_type, selector in alternative_buttons:
                    try:
                        alt_button = driver.find_element(selector_type, selector)
                        
                        # –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–∏
                        driver.execute_script("""
                            var overlays = document.querySelectorAll('.ui-widget-overlay');
                            for (var i = 0; i < overlays.length; i++) {
                                overlays[i].style.display = 'none';
                            }
                        """)
                        
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                        driver.execute_script("arguments[0].scrollIntoView(true);", alt_button)
                        time.sleep(1)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∫–ª–∏–∫–∞
                        driver.execute_script("arguments[0].click();", alt_button)
                        
                        print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∏–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
                        button_found = True
                        break
                        
                    except Exception as alt_e:
                        continue
                
                if not button_found:
                    print(f"–í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
                    return None
                    
                # –ï—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª, –∂–¥–µ–º —Ñ–∞–π–ª
                print("–ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
                max_wait_time = 60
                wait_interval = 2
                waited_time = 0
                
                downloaded_file_found = False
                
                while waited_time < max_wait_time:
                    time.sleep(wait_interval)
                    waited_time += wait_interval
                    
                    # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    downloaded_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
                    if downloaded_files:
                        latest_file = downloaded_files[0]
                        
                        initial_size = os.path.getsize(latest_file)
                        time.sleep(3)
                        
                        try:
                            final_size = os.path.getsize(latest_file)
                            if initial_size == final_size and final_size > 0:
                                print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –∑–∞–≥—Ä—É–∂–µ–Ω: {latest_file} (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                                downloaded_file_found = True
                                break
                        except:
                            continue
                    else:
                        print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞... ({waited_time}/{max_wait_time} —Å–µ–∫)")
                
                if downloaded_file_found:
                    new_filename = f"TradeWatch_batch_{batch_number}.xlsx"
                    new_filepath = os.path.join(download_dir, new_filename)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                    if os.path.exists(new_filepath):
                        try:
                            existing_size = os.path.getsize(new_filepath)
                            new_size = os.path.getsize(latest_file)
                            
                            if existing_size == new_size:
                                print(f"–§–∞–π–ª {new_filepath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ç–∞–∫–∏–º –∂–µ —Ä–∞–∑–º–µ—Ä–æ–º ({existing_size} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                                # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                                os.remove(latest_file)
                                return new_filepath
                            else:
                                print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª {new_filepath} –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä ({existing_size} vs {new_size} –±–∞–π—Ç), –∑–∞–º–µ–Ω—è–µ–º...")
                                os.remove(new_filepath)
                        except Exception as rm_e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª {new_filepath}: {rm_e}")
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    try:
                        os.rename(latest_file, new_filepath)
                        print(f"–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {latest_file} -> {new_filepath}")
                        return new_filepath
                    except Exception as rename_e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {rename_e}")
                        return None
                else:
                    return None
                    
            except Exception as alt_error:
                print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}: {alt_error}")
                return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {batch_number}: {e}")
        return None


def process_supplier_file_with_tradewatch(supplier_file_path, download_dir, headless=True, progress_callback=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: –∏–∑–≤–ª–µ–∫–∞–µ—Ç EAN –∫–æ–¥—ã, 
    —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TradeWatch
    –ö–ê–ñ–î–ê–Ø –ì–†–£–ü–ü–ê –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ù–û–í–û–ô —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        supplier_file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ TradeWatch
        headless: –∑–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (True) –∏–ª–∏ —Å GUI (False)
        progress_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º TradeWatch
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        print(f"–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_file_path}")
        df = pd.read_excel(supplier_file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if 'GTIN' not in df.columns:
            print("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ GTIN")
            return []
        
        if 'Price' not in df.columns:
            print("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ Price")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º EAN –∫–æ–¥—ã
        ean_codes = df['GTIN'].dropna().astype(str).tolist()
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã
        ean_codes = [code.strip() for code in ean_codes if code.strip() and code.strip() != 'nan']
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(ean_codes)} EAN –∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        
        if not ean_codes:
            print("–ù–µ—Ç EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        batch_size = get_batch_size()
        batches = [ean_codes[i:i + batch_size] for i in range(0, len(ean_codes), batch_size)]
        
        print(f"–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ {len(batches)} –≥—Ä—É–ø–ø –ø–æ {batch_size} –∫–æ–¥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        download_path = Path(download_dir)
        download_path.mkdir(parents=True, exist_ok=True)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã TradeWatch –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã TradeWatch...")
        old_files_patterns = [
            "TradeWatch - raport konkurencji*.xlsx",
            "TradeWatch_raport_konkurencji_*.xlsx"
        ]
        
        for pattern in old_files_patterns:
            old_files = glob.glob(os.path.join(download_dir, pattern))
            for old_file in old_files:
                try:
                    os.remove(old_file)
                    print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file}")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {old_file}: {e}")
                    pass
        
        # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        print(f"üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
        downloaded_files = []
        processed_count = 0
        
        for i, batch in enumerate(batches, 1):
            print(f"\nüÜï –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –°–ï–°–°–ò–Æ –ë–†–ê–£–ó–ï–†–ê –¥–ª—è –≥—Ä—É–ø–ø—ã {i}/{len(batches)}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Chrome –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
            cleanup_chrome_temp_dirs()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            result = process_batch_with_new_browser(batch, download_dir, i, headless)
            
            if result:
                downloaded_files.append(result)
                processed_count += len(batch)
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ callback
                if progress_callback:
                    try:
                        progress_callback(processed_count)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤ progress_callback: {e}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {i} –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
        
        print(f"\nüèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(batches)} –≥—Ä—É–ø–ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
        existing_files = []
        for i, file_path in enumerate(downloaded_files):
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"  ‚úÖ {file_path} (—Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç)")
                existing_files.append(file_path)
            else:
                print(f"  ‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù!")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if existing_files:
            verify_batch_uniqueness(existing_files)
        
        return downloaded_files
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        return []


def process_batch_with_new_browser(ean_codes_batch, download_dir, batch_number, headless=True):
    """
    üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É EAN –∫–æ–¥–æ–≤ –≤ –ù–û–í–û–ô —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –ª—é–±–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
    
    Args:
        ean_codes_batch: —Å–ø–∏—Å–æ–∫ EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        batch_number: –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        headless: –∑–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (True) –∏–ª–∏ —Å GUI (False)
    
    Returns:
        str: –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    if not ean_codes_batch:
        print("–ü—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ EAN –∫–æ–¥–æ–≤")
        return None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome –¥–ª—è –ù–û–í–û–ô —Å–µ—Å—Å–∏–∏
    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    
    if headless:
        options.add_argument("--headless")
    
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-logging")
    options.add_argument("--disable-web-security")
    options.add_argument("--allow-running-insecure-content")
    
    # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –í–°–ï –≤–∏–¥—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    options.add_argument("--disable-application-cache")
    options.add_argument("--disable-background-timer-throttling")
    options.add_argument("--disable-backgrounding-occluded-windows")
    options.add_argument("--disable-renderer-backgrounding")
    options.add_argument("--disable-features=TranslateUI")
    options.add_argument("--disable-ipc-flooding-protection")
    options.add_argument("--disable-background-networking")
    options.add_argument("--disable-default-apps")
    options.add_argument("--disable-sync")
    options.add_argument("--disable-translate")
    options.add_argument("--hide-scrollbars")
    options.add_argument("--metrics-recording-only")
    options.add_argument("--no-first-run")
    options.add_argument("--safebrowsing-disable-auto-update")
    options.add_argument("--disable-plugins")
    options.add_argument("--disable-plugins-discovery")
    options.add_argument("--disable-preconnect")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    download_path = Path(download_dir)
    prefs = {
        "download.default_directory": str(download_path.absolute()),
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    }
    options.add_experimental_option("prefs", prefs)
    
    # üÜï –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –î–†–ê–ô–í–ï–† –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    service = get_chrome_service()
    driver = webdriver.Chrome(service=service, options=options)
    
    try:
        print(f"üî• –ù–û–í–ê–Ø –°–ï–°–°–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É {batch_number} —Å {len(ean_codes_batch)} EAN –∫–æ–¥–∞–º–∏")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º EAN –∫–æ–¥—ã –≤ 13-—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        formatted_ean_codes = []
        for code in ean_codes_batch:
            formatted_code = format_ean_to_13_digits(code)
            if formatted_code:
                formatted_ean_codes.append(formatted_code)
        
        if not formatted_ean_codes:
            print("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö EAN –∫–æ–¥–æ–≤ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None
        
        print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_ean_codes)} EAN –∫–æ–¥–æ–≤ –≤ 13-—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ EAN –∫–æ–¥—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        ean_codes_string = ' '.join(formatted_ean_codes)
        print(f"üîç DEBUG: EAN –∫–æ–¥—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}: {ean_codes_string[:100]}...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        driver.get("https://tradewatch.pl/login.jsf")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        wait = WebDriverWait(driver, 15)
        
        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è email
        email_field = wait.until(EC.presence_of_element_located((By.NAME, "j_username")))
        
        # –í–≤–æ–¥–∏–º email
        email_field.clear()
        email_field.send_keys(TRADEWATCH_EMAIL)
        
        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
        password_field = driver.find_element(By.NAME, "j_password")
        
        # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        password_field.clear()
        password_field.send_keys(TRADEWATCH_PASSWORD)
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        login_button = driver.find_element(By.NAME, "btnLogin")
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        login_button.click()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        current_url = driver.current_url
        
        if "login.jsf" in current_url:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
            return None
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}!")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É EAN Price Report
        driver.get("https://tradewatch.pl/report/ean-price-report.jsf")
        time.sleep(3)
        
        # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ EAN –∫–æ–¥–æ–≤
        ean_field = wait.until(EC.presence_of_element_located((By.ID, "eansPhrase")))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏)
        initial_value = ean_field.get_attribute("value")
        if initial_value and initial_value.strip():
            print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏! –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{initial_value}'")
            return None
        else:
            print(f"‚úÖ –ü–æ–ª–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–µ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º EAN –∫–æ–¥—ã (–ø–æ–ª–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        ean_field.send_keys(ean_codes_string)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—Ç–∞–≤–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ –Ω–∞—à–∏ –∫–æ–¥—ã
        inserted_value = ean_field.get_attribute("value")
        inserted_codes = inserted_value.strip().split() if inserted_value else []
        expected_codes = ean_codes_string.strip().split()
        
        if len(inserted_codes) != len(expected_codes):
            print(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ ({len(inserted_codes)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º ({len(expected_codes)})")
            return None
        
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(inserted_codes)} EAN –∫–æ–¥–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(1)
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Generuj"
        generate_button = driver.find_element(By.ID, "j_idt703")
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        generate_button.click()
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f"‚è≥ –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
        time.sleep(5)
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
        time.sleep(3)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        old_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
        for old_file in old_files:
            try:
                os.remove(old_file)
            except:
                pass
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Eksport do XLS"
        export_button = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Eksport do XLS")))
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_button.click()
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        print(f"‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
        max_wait_time = 60
        wait_interval = 2
        waited_time = 0
        
        downloaded_file_found = False
        
        while waited_time < max_wait_time:
            time.sleep(wait_interval)
            waited_time += wait_interval
            
            # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            downloaded_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
            if downloaded_files:
                latest_file = downloaded_files[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                initial_size = os.path.getsize(latest_file)
                time.sleep(3)
                
                try:
                    final_size = os.path.getsize(latest_file)
                    if initial_size == final_size and final_size > 0:
                        print(f"‚úÖ –§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –∑–∞–≥—Ä—É–∂–µ–Ω: {latest_file} (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                        downloaded_file_found = True
                        break
                    else:
                        print(f"‚è≥ –§–∞–π–ª –µ—â–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è... (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                except:
                    print(f"‚è≥ –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...")
                    continue
            else:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞... ({waited_time}/{max_wait_time} —Å–µ–∫)")
        
        if downloaded_file_found:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            new_filename = f"TradeWatch_raport_konkurencji_{timestamp}.xlsx"
            new_filepath = os.path.join(download_dir, new_filename)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(new_filepath):
                try:
                    os.remove(new_filepath)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {new_filepath}")
                except Exception as rm_e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª {new_filepath}: {rm_e}")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                os.rename(latest_file, new_filepath)
                print(f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {latest_file} -> {new_filepath}")
                return new_filepath
            except Exception as rename_e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {rename_e}")
                return None
        else:
            print(f"‚ùå –§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {max_wait_time} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {batch_number} –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {e}")
        return None
    
    finally:
        # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        print(f"üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
        driver.quit()


def process_supplier_file_with_tradewatch_old_version(supplier_file_path, download_dir, headless=True):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: –∏–∑–≤–ª–µ–∫–∞–µ—Ç EAN –∫–æ–¥—ã, 
    —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TradeWatch
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    
    Args:
        supplier_file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ TradeWatch
        headless: –∑–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (True) –∏–ª–∏ —Å GUI (False)
    
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º TradeWatch
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        print(f"–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_file_path}")
        df = pd.read_excel(supplier_file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if 'GTIN' not in df.columns:
            print("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ GTIN")
            return []
        
        if 'Price' not in df.columns:
            print("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ Price")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º EAN –∫–æ–¥—ã
        ean_codes = df['GTIN'].dropna().astype(str).tolist()
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã
        ean_codes = [code.strip() for code in ean_codes if code.strip() and code.strip() != 'nan']
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(ean_codes)} EAN –∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        
        if not ean_codes:
            print("–ù–µ—Ç EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        batch_size = get_batch_size()
        batches = [ean_codes[i:i + batch_size] for i in range(0, len(ean_codes), batch_size)]
        
        print(f"–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ {len(batches)} –≥—Ä—É–ø–ø –ø–æ {batch_size} –∫–æ–¥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        download_path = Path(download_dir)
        download_path.mkdir(parents=True, exist_ok=True)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã TradeWatch –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã TradeWatch...")
        old_files_patterns = [
            "TradeWatch - raport konkurencji*.xlsx",
            "TradeWatch_raport_konkurencji_*.xlsx"
        ]
        
        for pattern in old_files_patterns:
            old_files = glob.glob(os.path.join(download_dir, pattern))
            for old_file in old_files:
                try:
                    os.remove(old_file)
                    print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file}")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {old_file}: {e}")
                    pass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome –æ–¥–∏–Ω —Ä–∞–∑
        options = webdriver.ChromeOptions()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        if headless:
            options.add_argument("--headless")
        
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-logging")
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-running-insecure-content")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        prefs = {
            "download.default_directory": str(download_path.absolute()),
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        options.add_experimental_option("prefs", prefs)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑
        service = get_chrome_service()
        driver = webdriver.Chrome(service=service, options=options)
        
        try:
            print("–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            driver.get("https://tradewatch.pl/login.jsf")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            wait = WebDriverWait(driver, 10)
            
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è email
            email_field = wait.until(EC.presence_of_element_located((By.NAME, "j_username")))
            
            # –í–≤–æ–¥–∏–º email
            email_field.clear()
            email_field.send_keys(TRADEWATCH_EMAIL)
            
            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
            password_field = driver.find_element(By.NAME, "j_password")
            
            # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
            password_field.clear()
            password_field.send_keys(TRADEWATCH_PASSWORD)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button = driver.find_element(By.NAME, "btnLogin")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button.click()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            current_url = driver.current_url
            
            if "login.jsf" in current_url:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É")
                return []
            
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–ø–ø...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(batches)} –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            downloaded_files = []
            
            for i, batch in enumerate(batches, 1):
                print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É {i}/{len(batches)} ({len(batch)} EAN –∫–æ–¥–æ–≤)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≥—Ä—É–ø–ø—ã —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                target_filename = f"TradeWatch_batch_{i}.xlsx"
                target_filepath = os.path.join(download_dir, target_filename)
                
                if os.path.exists(target_filepath):
                    existing_size = os.path.getsize(target_filepath)
                    if existing_size > 0:
                        print(f"–§–∞–π–ª –≥—Ä—É–ø–ø—ã {i} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({existing_size} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                        downloaded_files.append(target_filepath)
                        continue
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥—Ä—É–ø–ø—ã
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                old_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji.xlsx"))
                for old_file in old_files:
                    try:
                        os.remove(old_file)
                        print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file}")
                    except:
                        pass
                
                # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Ü–µ–ª–µ–≤—ã–º –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(target_filepath):
                    try:
                        os.remove(target_filepath)
                        print(f"–£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {target_filepath}")
                    except:
                        pass
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
                result = process_batch_in_session(driver, batch, download_dir, i)
                
                if result:
                    downloaded_files.append(result)
                    print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {i}")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
                if i < len(batches):
                    print(f"üîÑ –í–ê–ñ–ù–ê–Ø –ü–ê–£–ó–ê –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ {i} –∏ {i+1} –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
                    time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                    driver.execute_script("localStorage.clear(); sessionStorage.clear();")
                    print(f"üßπ –û—á–∏—â–µ–Ω –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ {i} –∏ {i+1}")
            
            print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(batches)} –≥—Ä—É–ø–ø")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
            existing_files = []
            for i, file_path in enumerate(downloaded_files):
                if os.path.exists(file_path):
                    size = os.path.getsize(file_path)
                    print(f"  ‚úÖ {file_path} (—Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç)")
                    existing_files.append(file_path)
                else:
                    print(f"  ‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù!")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if existing_files:
                verify_batch_uniqueness(existing_files)
            
            return downloaded_files
            
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –∫–æ–Ω—Ü–µ
            print("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            driver.quit()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        return []


def login_to_tradewatch():
    """
    –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—É—Å—Ç–∞—Ä–µ–ª–∞)
    """
    print("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ process_supplier_file_with_tradewatch()")
    pass


def process_multiple_batches_parallel(main_driver, ean_groups, download_dir, max_parallel=4):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø EAN –∫–æ–¥–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
    
    Args:
        main_driver: –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        ean_groups: —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø EAN –∫–æ–¥–æ–≤
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        max_parallel: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    """
    results = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 4 —à—Ç—É–∫–∏
    for i in range(0, len(ean_groups), max_parallel):
        batch_to_process = ean_groups[i:i + max_parallel]
        
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≥—Ä—É–ø–ø—ã {i+1}-{min(i+max_parallel, len(ean_groups))}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_parallel) as executor:
            futures = []
            
            for j, group in enumerate(batch_to_process):
                batch_number = i + j + 1
                future = executor.submit(
                    process_batch_in_separate_browser, 
                    group, 
                    download_dir, 
                    batch_number
                )
                futures.append(future)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in concurrent.futures.as_completed(futures):
                try:
                    result = future.result()
                    if result:
                        results.append(result)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        
        if i + max_parallel < len(ean_groups):
            print("–ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –≥—Ä—É–ø–ø...")
            time.sleep(3)
    
    return results


def process_batch_in_separate_browser(ean_codes_batch, download_dir, batch_number):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É EAN –∫–æ–¥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    
    Args:
        ean_codes_batch: —Å–ø–∏—Å–æ–∫ EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        batch_number: –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
    
    Returns:
        str: –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
    """
    driver = None
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from webdriver_manager.chrome import ChromeDriverManager
        from selenium.webdriver.chrome.service import Service
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        prefs = {
            "download.default_directory": download_dir,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        service = get_chrome_service()
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        print(f"–°–æ–∑–¥–∞–Ω –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
        
        # –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        driver.get("https://tradewatch.pl/login.jsf")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        wait = WebDriverWait(driver, 20)
        
        # –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω
        username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
        username_field.clear()
        username_field.send_keys(TRADEWATCH_EMAIL)
        
        # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        password_field = driver.find_element(By.NAME, "password")
        password_field.clear()
        password_field.send_keys(TRADEWATCH_PASSWORD)
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        login_button = driver.find_element(By.NAME, "btnLogin")
        login_button.click()
        
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        current_url = driver.current_url
        if "login.jsf" in current_url:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
            return None
            
        print(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É EAN Price Report
        driver.get("https://tradewatch.pl/report/ean-price-report.jsf")
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º EAN –∫–æ–¥—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        ean_codes_string = ' '.join(str(code) for code in ean_codes_batch)
        
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ EAN –∫–æ–¥–æ–≤
        ean_input = wait.until(EC.presence_of_element_located((By.ID, "report_form:ean_codes")))
        ean_input.clear()
        ean_input.send_keys(ean_codes_string)
        
        print(f"–í—Å—Ç–∞–≤–ª–µ–Ω—ã EAN –∫–æ–¥—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}: {len(ean_codes_batch)} –∫–æ–¥–æ–≤")
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "Szukaj"
        search_button = wait.until(EC.element_to_be_clickable((By.ID, "report_form:search_button")))
        search_button.click()
        
        print(f"–ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
        time.sleep(5)
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        wait.until(EC.presence_of_element_located((By.ID, "report_form:results")))
        print(f"–ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
        time.sleep(3)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return export_results_for_separate_browser(driver, download_dir, batch_number, wait)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {batch_number}: {e}")
        return None
    finally:
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if driver:
            try:
                driver.quit()
                print(f"–ë—Ä–∞—É–∑–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –∑–∞–∫—Ä—ã—Ç")
            except:
                pass


def export_results_for_separate_browser(driver, download_dir, batch_number, wait):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    """
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        old_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji*.xlsx"))
        for old_file in old_files:
            try:
                os.remove(old_file)
            except:
                pass
        
        export_button = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Eksport do XLS")))
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        click_success = False
        
        # –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
        try:
            export_button.click()
            click_success = True
            print(f"–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} (–æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫)")
        except Exception as e:
            print(f"–û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}: {e}")
            
            # –°–ø–æ—Å–æ–± 2: JavaScript –∫–ª–∏–∫
            try:
                driver.execute_script("arguments[0].click();", export_button)
                click_success = True
                print(f"–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} (JavaScript –∫–ª–∏–∫)")
            except Exception as js_e:
                print(f"JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}: {js_e}")
                
                # –°–ø–æ—Å–æ–± 3: –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–∏
                try:
                    overlays = driver.find_elements(By.CLASS_NAME, "ui-widget-overlay")
                    for overlay in overlays:
                        driver.execute_script("arguments[0].style.display = 'none';", overlay)
                    
                    time.sleep(1)
                    export_button.click()
                    click_success = True
                    print(f"–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} (–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–≤–µ—Ä–ª–µ–µ–≤)")
                except Exception as overlay_e:
                    print(f"–ö–ª–∏–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–≤–µ—Ä–ª–µ–µ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}: {overlay_e}")
        
        if not click_success:
            print(f"–í—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}")
            return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        print(f"–ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}...")
        return wait_for_download_separate_browser(download_dir, batch_number)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥—Ä—É–ø–ø—ã {batch_number}: {e}")
        return None


def wait_for_download_separate_browser(download_dir, batch_number):
    """
    –ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    """
    max_wait_time = 60
    wait_interval = 2
    waited_time = 0
    
    while waited_time < max_wait_time:
        time.sleep(wait_interval)
        waited_time += wait_interval
        
        # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        downloaded_files = glob.glob(os.path.join(download_dir, "TradeWatch - raport konkurencji*.xlsx"))
        if downloaded_files:
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            latest_file = max(downloaded_files, key=os.path.getctime)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞
            initial_size = os.path.getsize(latest_file)
            time.sleep(3)
            
            try:
                final_size = os.path.getsize(latest_file)
                if initial_size == final_size and final_size > 0:
                    print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –∑–∞–≥—Ä—É–∂–µ–Ω: {latest_file} (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    new_filename = f"TradeWatch_batch_{batch_number}.xlsx"
                    new_filepath = os.path.join(download_dir, new_filename)
                    
                    if os.path.exists(new_filepath):
                        os.remove(new_filepath)
                    
                    os.rename(latest_file, new_filepath)
                    return new_filepath
                else:
                    print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –µ—â–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è... (—Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç)")
            except:
                print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...")
                continue
        else:
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number}... ({waited_time}/{max_wait_time} —Å–µ–∫)")
    
    print(f"–§–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã {batch_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {max_wait_time} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
    return None


def process_supplier_file_with_tradewatch_interruptible(supplier_file_path, download_dir, stop_flag_callback=None, progress_callback=None, headless=True):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    
    Args:
        supplier_file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        download_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ TradeWatch
        stop_flag_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        progress_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        headless: –∑–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (True) –∏–ª–∏ —Å GUI (False)
    
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º TradeWatch
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        print(f"–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_file_path}")
        df = pd.read_excel(supplier_file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if 'GTIN' not in df.columns:
            print("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ GTIN")
            return []
        
        if 'Price' not in df.columns:
            print("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ Price")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º EAN –∫–æ–¥—ã
        ean_codes = df['GTIN'].dropna().astype(str).tolist()
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã
        ean_codes = [code.strip() for code in ean_codes if code.strip() and code.strip() != 'nan']
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(ean_codes)} EAN –∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        
        if not ean_codes:
            print("–ù–µ—Ç EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        batch_size = get_batch_size()
        batches = [ean_codes[i:i + batch_size] for i in range(0, len(ean_codes), batch_size)]
        
        print(f"–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ {len(batches)} –≥—Ä—É–ø–ø –ø–æ {batch_size} –∫–æ–¥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        download_path = Path(download_dir)
        download_path.mkdir(parents=True, exist_ok=True)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã TradeWatch –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã TradeWatch...")
        old_files_patterns = [
            "TradeWatch - raport konkurencji*.xlsx",
            "TradeWatch_raport_konkurencji_*.xlsx"
        ]
        
        for pattern in old_files_patterns:
            old_files = glob.glob(os.path.join(download_dir, pattern))
            for old_file in old_files:
                try:
                    os.remove(old_file)
                    print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file}")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {old_file}: {e}")
                    pass
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        print(f"üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
        downloaded_files = []
        
        for i, batch in enumerate(batches, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if stop_flag_callback and stop_flag_callback():
                print(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –≥—Ä—É–ø–ø–µ {i}/{len(batches)}")
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if progress_callback:
                progress_callback(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É {i}/{len(batches)} ({len(batch)} EAN –∫–æ–¥–æ–≤)...")
            
            print(f"\nüÜï –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –°–ï–°–°–ò–Æ –ë–†–ê–£–ó–ï–†–ê –¥–ª—è –≥—Ä—É–ø–ø—ã {i}/{len(batches)}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Chrome –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
            cleanup_chrome_temp_dirs()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            result = process_batch_with_new_browser(batch, download_dir, i, headless)
            
            if result:
                downloaded_files.append(result)
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {i} –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
        
        if stop_flag_callback and stop_flag_callback():
            print(f"\nüõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(downloaded_files)} –∏–∑ {len(batches)} –≥—Ä—É–ø–ø")
        else:
            print(f"\nüèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(batches)} –≥—Ä—É–ø–ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
        existing_files = []
        for i, file_path in enumerate(downloaded_files):
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"  ‚úÖ {file_path} (—Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç)")
                existing_files.append(file_path)
            else:
                print(f"  ‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if existing_files:
            verify_batch_uniqueness(existing_files)
        
        return downloaded_files
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        return []
