import logging
import os
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List
import zipfile
import time

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
import pandas as pd

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Selenium –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å
try:
    from selenium import webdriver
    SELENIUM_AVAILABLE = True
    from tradewatch_login import process_supplier_file_with_tradewatch, get_parallel_sessions, get_batch_size
    print("‚úÖ Selenium –¥–æ—Å—Ç—É–ø–µ–Ω - TradeWatch –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
except ImportError:
    SELENIUM_AVAILABLE = False
    from tradewatch_fallback import download_from_tradewatch
    print("‚ùå Selenium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ TradeWatch –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel
from merge_excel_with_calculations import process_supplier_with_tradewatch_auto

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è httpx –∏ telegram.ext, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
activity_logger = logging.getLogger("bot_activity")
activity_logger.setLevel(logging.INFO)
file_handler = logging.FileHandler("bot_activity.log")
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
activity_logger.addHandler(file_handler)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
BOT_TOKEN = os.getenv("BOT_TOKEN", "8196649413:AAHQ6KmQgBTfYtC3MeFQRFHE5L37CKQvJlw")

# ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)  
OWNER_ID = int(os.getenv("OWNER_ID", "6755735414"))

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = Path("temp_files")
TEMP_DIR.mkdir(exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
user_supplier_files: Dict[int, str] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
processing_progress = {}
active_timers = {}

class ProcessingTimer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ EAN –∫–æ–¥–æ–≤"""
    
    def __init__(self, user_id: int, total_ean_count: int, progress_message, estimated_rate: float = 600):
        self.user_id = user_id
        self.total_ean_count = total_ean_count
        self.progress_message = progress_message
        self.start_time = time.time()
        self.processed_count = 0
        self.estimated_rate = estimated_rate  # EAN –≤ –º–∏–Ω—É—Ç—É
        self.actual_rate = estimated_rate  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è
        self.running = True
        self.timer_task = None
        self.loop = None
        
    def start(self, loop):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞"""
        self.loop = loop
        self._force_update_event = asyncio.Event()
        self.timer_task = asyncio.create_task(self._timer_loop())
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞"""
        self.running = False
        if self.timer_task:
            self.timer_task.cancel()
            try:
                await self.timer_task
            except asyncio.CancelledError:
                pass
    
    def update_progress(self, processed_count: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        print(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {processed_count} –∏–∑ {self.total_ean_count} –∫–æ–¥–æ–≤")
        self.processed_count = processed_count
        elapsed_time = time.time() - self.start_time
        
        if elapsed_time > 0 and processed_count > 0:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (EAN –≤ –º–∏–Ω—É—Ç—É)
            self.actual_rate = (processed_count / elapsed_time) * 60
            print(f"üöÄ –ù–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {self.actual_rate:.0f} EAN/–º–∏–Ω")
            
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if self.timer_task and not self.timer_task.done():
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                if hasattr(self, '_force_update_event'):
                    self._force_update_event.set()
            except:
                pass
    
    async def _timer_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–∞–π–º–µ—Ä–∞"""
        print(f"üïê –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
        
        last_update_time = time.time()
        
        while self.running:
            try:
                current_time = time.time()
                elapsed_time = current_time - self.start_time
                
                if self.processed_count > 0:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                    rate = self.actual_rate
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–≤–æ–π –º–∏–Ω—É—Ç—ã
                    rate = self.estimated_rate
                
                remaining_count = self.total_ean_count - self.processed_count
                
                if remaining_count <= 0:
                    print(f"üèÅ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω - –≤—Å–µ –∫–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                    break
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                remaining_minutes = remaining_count / rate if rate > 0 else 0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                time_since_update = current_time - last_update_time
                force_update = self._force_update_event.is_set()
                
                if time_since_update >= 15 or force_update:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    progress_text = f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ EAN –∫–æ–¥–æ–≤...\n\n"
                    progress_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.processed_count}/{self.total_ean_count} –∫–æ–¥–æ–≤\n"
                    progress_text += f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time/60:.1f} –º–∏–Ω\n"
                    progress_text += f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {rate:.0f} EAN/–º–∏–Ω\n"
                    progress_text += f"‚è∞ –î–æ –∫–æ–Ω—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes:.1f} –º–∏–Ω"
                    
                    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞: {self.processed_count}/{self.total_ean_count} –∫–æ–¥–æ–≤")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫)
                    try:
                        await self.progress_message.edit_text(progress_text)
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        last_update_time = current_time
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        if force_update:
                            self._force_update_event.clear()
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                try:
                    await asyncio.wait_for(self._force_update_event.wait(), timeout=5)
                except asyncio.TimeoutError:
                    pass  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                
            except asyncio.CancelledError:
                print(f"üõë –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
                break
        
        print(f"üîö –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")

class TelegramBot:
    def __init__(self, token: str):
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:10]}...")
        self.token = token
        # –°–æ–∑–¥–∞—ë–º Application —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        from telegram.request import HTTPXRequest
        request = HTTPXRequest(
            connection_pool_size=8,
            read_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            write_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–ø–∏—Å—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            connect_timeout=60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        )
        self.application = Application.builder().token(token).request(request).build()
        logger.info("‚úÖ Application —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        # –î–û–ë–ê–í–ò–¢–¨: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        print("üöÄ –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê")
        print("=" * 50)
        print("ÔøΩ Railway Hobby –ø–ª–∞–Ω - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

        parallel_sessions = get_parallel_sessions()
        batch_size = get_batch_size()
        print(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {parallel_sessions}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size} EAN –∫–æ–¥–æ–≤")
        print(f"‚ö° –†–∞—Å—á–µ—Ç–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {batch_size * parallel_sessions} EAN –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
        print("=" * 50)

        self.setup_handlers()
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        ]
        await self.application.bot.set_my_commands(commands)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("clear", self.clear_files))
        
        # Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.application.add_handler(MessageHandler(filters.Document.FileExtension("xlsx"), self.handle_file))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        
        welcome_text = f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TradeWatch –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç –∏—Ö —Å –≤–∞—à–∏–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.

üìã **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (.xlsx) —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ:
   ‚Ä¢ **GTIN** 
   ‚Ä¢ **Price** 
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç"
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   ‚Ä¢ –ò–∑–≤–ª–µ—á—ë—Ç EAN –∫–æ–¥—ã –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TradeWatch –ø–æ —ç—Ç–∏–º –∫–æ–¥–∞–º
   ‚Ä¢ –û–±—ä–µ–¥–∏–Ω–∏—Ç –≤—Å—ë –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
‚Ä¢ üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª - —É–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá
        """
        
        keyboard = self.get_main_keyboard(user_id)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `/clear` - –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:**
‚Ä¢ Excel —Ñ–∞–π–ª—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (.xlsx)
‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ:
  - **GTIN** (EAN –∫–æ–¥—ã —Ç–æ–≤–∞—Ä–æ–≤)
  - **Price** (—Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤)

**–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**
1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç–µ –ø—Ä–∞–π—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å EAN –∫–æ–¥–∞–º–∏
2. –ë–æ—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç EAN –∫–æ–¥—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ GTIN
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TradeWatch
4. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å—ë –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏ Profit –∏ ROI

**–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ GTIN –∏ Price –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ!

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/clear` –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–º–æ—â–∏: [@iilluummiinnaattoorr](https://t.me/iilluummiinnaattoorr)
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def clear_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if user_id in user_supplier_files:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            file_path = user_supplier_files[user_id]
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å
            del user_supplier_files[user_id]
            
            await update.message.reply_text(
                "üóëÔ∏è –§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É–¥–∞–ª—ë–Ω! –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.",
                reply_markup=self.get_main_keyboard(user_id)
            )
        else:
            await update.message.reply_text(
                "üìÅ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.",
                reply_markup=self.get_main_keyboard(user_id)
            )

    def get_main_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        has_file = user_id in user_supplier_files
        
        if has_file:
            file_name = os.path.basename(user_supplier_files[user_id])
            keyboard = [
                [InlineKeyboardButton(f" –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç ({file_name})", callback_data="report")],
                [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª", callback_data="clear")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç (–Ω–µ—Ç —Ñ–∞–π–ª–∞)", callback_data="report")],
                [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª", callback_data="clear")]
            ]
        
        return InlineKeyboardMarkup(keyboard)

    def get_processing_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        keyboard = []
        return InlineKeyboardMarkup(keyboard)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        if query.data == "report":
            await self.create_report(query, user_id)
        
        elif query.data == "clear":
            await self.clear_user_files(query, user_id)

    async def clear_user_files(self, query, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback"""
        if user_id in user_supplier_files:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            file_path = user_supplier_files[user_id]
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å
            del user_supplier_files[user_id]
            
            await query.edit_message_text(
                "üóëÔ∏è –§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É–¥–∞–ª—ë–Ω! –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.",
                reply_markup=self.get_main_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "üìÅ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.",
                reply_markup=self.get_main_keyboard(user_id)
            )

    async def handle_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        telegram_username = update.effective_user.username or "Unknown"
        file = update.message.document

        if not file.file_name.endswith('.xlsx'):
            await update.message.reply_text(
                "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .xlsx",
                reply_markup=self.get_main_keyboard(user_id)
            )
            return

        try:
            # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_dir = TEMP_DIR / str(user_id)
            user_dir.mkdir(exist_ok=True)

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = user_dir / file.file_name
            downloaded_file = await context.bot.get_file(file.file_id)
            await downloaded_file.download_to_drive(file_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            try:
                df = pd.read_excel(file_path)
                if 'GTIN' not in df.columns or 'Price' not in df.columns:
                    await update.message.reply_text(
                        "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ GTIN –∏ Price!",
                        reply_markup=self.get_main_keyboard(user_id)
                    )
                    return

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EAN –∫–æ–¥–æ–≤
                ean_count = df['GTIN'].dropna().count()

                if ean_count == 0:
                    await update.message.reply_text(
                        "‚ùå –í –∫–æ–ª–æ–Ω–∫–µ GTIN –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö!",
                        reply_markup=self.get_main_keyboard(user_id)
                    )
                    return

                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ñ–∞–π–ª–µ
                activity_logger.info(f"User ID: {user_id}, Nickname: {user_name}, Username: {telegram_username}, EAN Count: {ean_count}, File: {file.file_name}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
                owner_message = (
                    f"üì¢ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{telegram_username})\n"
                    f"üÜî ID: {user_id}\n"
                    f"üìÇ –§–∞–π–ª: {file.file_name}\n"
                    f"üè∑Ô∏è EAN –∫–æ–¥–æ–≤: {ean_count}"
                )
                await context.bot.send_message(chat_id=OWNER_ID, text=owner_message)

            except Exception as e:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}",
                    reply_markup=self.get_main_keyboard(user_id)
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            user_supplier_files[user_id] = str(file_path)

            await update.message.reply_text(
                f"‚úÖ –§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                f"üìÇ –§–∞–π–ª: {file.file_name}\n"
                f"üè∑Ô∏è EAN –∫–æ–¥–æ–≤: {ean_count}\n\n"
                f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ TradeWatch.",
                reply_markup=self.get_main_keyboard(user_id)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                reply_markup=self.get_main_keyboard(user_id)
            )

    async def create_report(self, query, user_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö TradeWatch"""
        if user_id not in user_supplier_files or not user_supplier_files[user_id]:
            await query.edit_message_text(
                "üìÅ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx) —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ GTIN –∏ Price.",
                reply_markup=self.get_main_keyboard(user_id)
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_message = await query.edit_message_text(
            "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        try:
            supplier_file_path = user_supplier_files[user_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(supplier_file_path):
                await progress_message.edit_text(
                    "‚ùå –§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–Ω–æ–≤–∞.",
                    reply_markup=self.get_main_keyboard(user_id)
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await progress_message.edit_text(
                "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é EAN –∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...\n"
                "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∑–∞–ø—Ä–æ—Å—ã –∫ TradeWatch..."
            )
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EAN –∫–æ–¥–æ–≤ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
            try:
                df = pd.read_excel(supplier_file_path)
                if 'GTIN' in df.columns:
                    ean_codes = df['GTIN'].dropna().astype(str).tolist()
                    ean_codes = [code.strip() for code in ean_codes if code.strip() and code.strip() != 'nan']
                    total_ean_count = len(ean_codes)
                else:
                    total_ean_count = 0
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ EAN –∫–æ–¥–æ–≤: {e}")
                total_ean_count = 0
            
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_temp_dir = TEMP_DIR / str(user_id)
            user_temp_dir.mkdir(exist_ok=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            timer = None
            if total_ean_count > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–∞—Ö
                await progress_message.edit_text(
                    f"‚è≥ –ù–∞–π–¥–µ–Ω–æ {total_ean_count} EAN –∫–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
                    f"–ó–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞..."
                )
                
                timer = ProcessingTimer(user_id, total_ean_count, progress_message)
                active_timers[user_id] = timer
                timer.start(asyncio.get_event_loop())
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
                await asyncio.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä
            import concurrent.futures
            import threading
            
            def run_processing():
                # –î–û–ë–ê–í–ò–¢–¨: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                print("ÔøΩ Railway Hobby –ø–ª–∞–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                parallel_sessions = get_parallel_sessions()
                batch_size = get_batch_size()
                print(f"üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {parallel_sessions}")
                print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size} EAN –∫–æ–¥–æ–≤")

                return process_supplier_with_tradewatch_auto(
                    supplier_file_path, 
                    str(user_temp_dir),
                    progress_callback=lambda processed: timer.update_progress(processed) if timer else None
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = loop.run_in_executor(executor, run_processing)
                result = await future
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            if timer:
                await timer.stop()
                if user_id in active_timers:
                    del active_timers[user_id]
            
            if not result['success']:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await progress_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n{error_msg}\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏:\n"
                    "‚Ä¢ GTIN (—Å EAN –∫–æ–¥–∞–º–∏)\n"
                    "‚Ä¢ Price (—Å —Ü–µ–Ω–∞–º–∏)\n\n"
                    "–ö–æ–ª–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ñ–∞–π–ª–∞!",
                    reply_markup=self.get_main_keyboard(user_id)
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await progress_message.edit_text(
                "üìä –°–æ–∑–¥–∞—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏...\n"
                "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = result['output_file']
            
            if not os.path.exists(output_file):
                await progress_message.edit_text(
                    "‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                    reply_markup=self.get_main_keyboard(user_id)
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = os.path.getsize(output_file)
            file_size_mb = file_size / (1024 * 1024)
            
            await progress_message.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç... (—Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB)")
            
            # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 50MB –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if file_size_mb > 45:  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
                # –ü—Ä–æ–±—É–µ–º —Å–∂–∞—Ç—å —Ñ–∞–π–ª
                zip_file = Path(output_file).parent / f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
                
                with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zf:
                    zf.write(output_file, os.path.basename(output_file))
                
                zip_size = zip_file.stat().st_size / (1024 * 1024)
                
                if zip_size > 45:
                    await progress_message.edit_text(
                        f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ({file_size_mb:.1f} MB)\n"
                        f"–î–∞–∂–µ –≤ —Å–∂–∞—Ç–æ–º –≤–∏–¥–µ: {zip_size:.1f} MB\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏.",
                        reply_markup=self.get_main_keyboard(user_id)
                    )
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
                report_status = " –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!"
                with open(zip_file, 'rb') as f:
                    await query.message.reply_document(
                        document=f,
                        filename=zip_file.name,
                        caption=f"{report_status}\n\n"
                               f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                               f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result['total_rows']}\n"
                               f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö EAN: {result['unique_ean']}\n"
                               f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB\n"
                               f"‚Ä¢ –ê—Ä—Ö–∏–≤: {zip_size:.1f} MB"
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
                report_status = "üìä –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!"
                try:
                    with open(output_file, 'rb') as f:
                        await asyncio.wait_for(
                            query.message.reply_document(
                                document=f,
                                filename=os.path.basename(output_file),
                                caption=f"{report_status}\n\n"
                                       f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                       f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result['total_rows']}\n"
                                       f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö EAN: {result['unique_ean']}\n"
                                       f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB"
                            ),
                            timeout=600  # 10 –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                        )
                except asyncio.TimeoutError:
                    await progress_message.edit_text(
                        f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ ({file_size_mb:.1f} MB)\n\n"
                        "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏.",
                        reply_markup=self.get_main_keyboard(user_id)
                    )
                    return
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.remove(output_file)
                if 'zip_file' in locals():
                    os.remove(zip_file)
            except:
                pass
            
            final_status = "‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
            await progress_message.edit_text(
                f"{final_status}\n\n"
                "–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞.",
                reply_markup=self.get_main_keyboard(user_id)
            )
            
        except Exception as e:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if user_id in active_timers:
                await active_timers[user_id].stop()
                del active_timers[user_id]
            
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            await progress_message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (.xlsx)\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ GTIN –∏ Price –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n"
                "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ",
                reply_markup=self.get_main_keyboard(user_id)
            )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        await update.message.reply_text(
            "üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!\n\n"
            "ÔøΩ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª - –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
            "üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ TradeWatch\n"
            "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª - —É–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª",
            reply_markup=self.get_main_keyboard(user_id)
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        async def post_init(application):
            await self.setup_bot_commands()

        self.application.post_init = post_init

        max_retries = 3
        retry_count = 0

        while retry_count < max_retries:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                self.application.run_polling(
                    allowed_updates=Update.ALL_TYPES,
                    drop_pending_updates=True  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º pending updates –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                )
                break  # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries}): {e}")

                if "Conflict" in str(e):
                    logger.error("‚ùå –ö–û–ù–§–õ–ò–ö–¢: –î—Ä—É–≥–∞—è –∫–æ–ø–∏—è –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
                    print("\n‚ùå –ö–û–ù–§–õ–ò–ö–¢ –û–ë–ù–ê–†–£–ñ–ï–ù!")
                    print("–î—Ä—É–≥–∞—è –∫–æ–ø–∏—è –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
                    print("–†–µ—à–µ–Ω–∏–µ:")
                    print("1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ deployments –≤ Railway dashboard")
                    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
                    print("3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

                    if retry_count < max_retries - 1:
                        wait_time = 30 * (retry_count + 1)  # 30s, 60s, 90s
                        logger.info(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        print(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        import time
                        time.sleep(wait_time)
                        retry_count += 1
                    else:
                        logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
                        break
                else:
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    break

        if retry_count >= max_retries:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω
    expected_token = "8196649413:AAHQ6KmQgBTfYtC3MeFQRFHE5L37CKQvJlw"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    bot_token_raw = os.getenv("BOT_TOKEN", "")
    bot_token_status = "‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù" if bot_token_raw and bot_token_raw == expected_token else "‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"BOT_TOKEN: {bot_token_status}")
    if bot_token_raw:
        print(f"BOT_TOKEN –¥–ª–∏–Ω–∞: {len(bot_token_raw)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"BOT_TOKEN –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {bot_token_raw[:20]}..." if len(bot_token_raw) > 20 else f"BOT_TOKEN: {bot_token_raw}")
        if bot_token_raw == expected_token:
            print("BOT_TOKEN —Å—Ç–∞—Ç—É—Å: ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –¢–û–ö–ï–ù")
        else:
            print("BOT_TOKEN —Å—Ç–∞—Ç—É—Å: ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –¢–û–ö–ï–ù")
    else:
        print("BOT_TOKEN: (–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)")

    tradewatch_email_status = "‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù" if os.getenv("TRADEWATCH_EMAIL") else "‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"
    tradewatch_password_status = "‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù" if os.getenv("TRADEWATCH_PASSWORD") else "‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"

    print(f"TRADEWATCH_EMAIL: {tradewatch_email_status}")
    print(f"TRADEWATCH_PASSWORD: {tradewatch_password_status}")
    print("")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    print("üîç –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ 'BOT' –∏–ª–∏ 'TRADE':")
    for key, value in os.environ.items():
        if 'BOT' in key.upper() or 'TRADE' in key.upper():
            masked_value = value[:10] + "..." + value[-5:] if len(value) > 15 else value
            print(f"  {key}: {masked_value}")
    print("")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    bot_token_env = os.getenv("BOT_TOKEN", "")

    print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN:")
    print(f"  –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {'–î–∞' if bot_token_env else '–ù–µ—Ç'}")
    print(f"  –î–ª–∏–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {len(bot_token_env)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏–Ω–∞: {len(expected_token)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º: {'–î–∞' if bot_token_env == expected_token else '–ù–µ—Ç'}")
    print("")

    if not bot_token_env:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –° BOT_TOKEN!")
        print("")
        print("üîç –ü–†–ò–ß–ò–ù–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("")
        print("üîß –†–ï–®–ï–ù–ò–ï:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Railway Dashboard: https://railway.app/dashboard")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç 'tradewatch-telegram-bot'")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É 'Variables' –≤ –≤–∞—à–µ–º –°–ï–†–í–ò–°–ï")
        print("4. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:")
        print(f"   Name: BOT_TOKEN")
        print(f"   Value: {expected_token}")
        print("5. –ù–∞–∂–º–∏—Ç–µ 'Save' –∏ –∑–∞—Ç–µ–º 'Redeploy'")
        print("")
        return

    if bot_token_env != expected_token:
        logger.error(f"‚ùå BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_token[:20]}..., –ü–æ–ª—É—á–µ–Ω–æ: {bot_token_env[:20]}...")
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –° BOT_TOKEN!")
        print("")
        print("ÔøΩ –ü–†–ò–ß–ò–ù–ê: –ó–Ω–∞—á–µ–Ω–∏–µ BOT_TOKEN –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º")
        print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ: {expected_token}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ: {bot_token_env}")
        print("")
        print("üîß –†–ï–®–ï–ù–ò–ï:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        print(f"   {expected_token}")
        print("2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ Railway")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ deployment")
        print("")
        return

    logger.info(f"‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")

    try:
        bot = TelegramBot(BOT_TOKEN)
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
